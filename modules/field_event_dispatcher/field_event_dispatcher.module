<?php

/**
 * @file
 * Field event dispatcher submodule.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\field_event_dispatcher\Event\Field\FieldFormatterInfoAlterEvent;
use Drupal\field_event_dispatcher\Event\Field\WidgetFormAlterEvent;
use Drupal\field_event_dispatcher\Event\Field\WidgetTypeFormAlterEvent;

// @todo hook_field_info_alter()
// @todo hook_field_ui_preconfigured_options_alter()
// @todo hook_field_storage_config_update_forbid()
// @todo hook_field_widget_info_alter()
// @todo hook_field_widget_multivalue_form_alter()
// @todo hook_field_info_max_weight()
// @todo hook_field_purge_field_storage()
// @todo hook_field_purge_field()

/**
 * Implements hook_field_widget_form_alter().
 *
 * {@inheritdoc}
 */
function field_event_dispatcher_field_widget_form_alter(array &$element, FormStateInterface $formState, array $context) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new WidgetFormAlterEvent($element, $formState, $context));
  $manager->register(new WidgetTypeFormAlterEvent($element, $formState, $context));
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * {@inheritdoc}
 */
function field_event_dispatcher_field_formatter_info_alter(array &$info) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = \Drupal::service('hook_event_dispatcher.manager');
  $event = new FieldFormatterInfoAlterEvent($info);
  $manager->register($event);
}
