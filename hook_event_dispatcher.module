<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\hook_event_dispatcher\Event\Entity\EntityInsertEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityUpdateEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityDeleteEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityPresaveEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityViewEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityAccessEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityCreateEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityLoadEvent;

/**
 * Implements hook_help().
 */
function hook_event_dispatcher_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hook_event_dispatcher':
      $output = file_get_contents(drupal_get_path('module', 'hook_event_dispatcher') . '/README.txt');
      return '<pre>' . $output . '</pre>';
  }
}


/**
 * Implements hook_entity_insert().
 */
function hook_event_dispatcher_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityInsertEvent($entity));
}

/**
 * Implements hook_entity_update().
 */
function hook_event_dispatcher_entity_update(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityUpdateEvent($entity));
}

/**
 * Implements hook_entity_delete().
 */
function hook_event_dispatcher_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityDeleteEvent($entity));
}

/**
 * Implements hook_entity_presave().
 */
function hook_event_dispatcher_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = $manager->register(new EntityPresaveEvent($entity));

  $entity = $event->getEntity();
}

/**
 * Implements hook_entity_access().
 */
function hook_event_dispatcher_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  /** @var \Drupal\hook_event_dispatcher\Event\Entity\EntityAccessEvent $event */
  $event = $manager->register(new EntityAccessEvent($entity, $operation, $account));

  return $event->getAccessResult();
}

/**
 * Implements hook_entity_create().
 */
function hook_event_dispatcher_entity_create(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityCreateEvent($entity));
}

/**
 * Implements hook_entity_load().
 */
function hook_event_dispatcher_entity_load(array $entities, $entity_type_id) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityLoadEvent($entities, $entity_type_id));
}

/**
 * Implements hook_entity_view().
 */
function hook_event_dispatcher_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  /** @var \Drupal\hook_event_dispatcher\Event\Entity\EntityViewEvent $event */
  $event = $manager->register(new EntityViewEvent($build, $entity, $display, $view_mode));

  $build = $event->getBuild();
}