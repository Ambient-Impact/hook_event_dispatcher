<?php

/**
 * @file
 * Hook event dispatcher module.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\hook_event_dispatcher\Event\Cron\CronEvent;
use Drupal\hook_event_dispatcher\Event\Language\LanguageSwitchLinksAlterEvent;
use Drupal\hook_event_dispatcher\Event\Path\PathDeleteEvent;
use Drupal\hook_event_dispatcher\Event\Path\PathInsertEvent;
use Drupal\hook_event_dispatcher\Event\Path\PathUpdateEvent;
use Drupal\hook_event_dispatcher\Event\Toolbar\ToolbarAlterEvent;
use Drupal\hook_event_dispatcher\Event\User\UserCancelEvent;
use Drupal\hook_event_dispatcher\Event\User\UserCancelMethodsAlterEvent;
use Drupal\hook_event_dispatcher\Event\User\UserFormatNameAlterEvent;
use Drupal\hook_event_dispatcher\Event\User\UserLoginEvent;
use Drupal\hook_event_dispatcher\Event\User\UserLogoutEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsDataAlterEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsDataEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPostBuildEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPostExecuteEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPostRenderEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPreBuildEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPreExecuteEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPreRenderEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsPreViewEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsQueryAlterEvent;
use Drupal\hook_event_dispatcher\Event\Views\ViewsQuerySubstitutionsEvent;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_help(string $routeName) {
  if ($routeName === 'help.page.hook_event_dispatcher') {
    $path = drupal_get_path('module', 'hook_event_dispatcher');
    $output = file_get_contents($path . '/README.md');
    return '<pre>' . $output . '</pre>';
  }
  return '';
}

/**
 * Implements hook_path_insert().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_path_insert(array $path) {
  if ($path === []) {
    return;
  }
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new PathInsertEvent($path);
  $manager->register($event);
}

/**
 * Implements hook_path_update().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_path_update(array $path) {
  if ($path === []) {
    return;
  }
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new PathUpdateEvent($path);
  $manager->register($event);
}

/**
 * Implements hook_path_delete().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_path_delete(array $path) {
  if ($path === []) {
    return;
  }
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new PathDeleteEvent($path);
  $manager->register($event);
}

/**
 * Implements hook_views_pre_view().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_pre_view(ViewExecutable $view, string $displayId, array &$args) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPreViewEvent($view, $displayId, $args);
  $manager->register($event);
}

/**
 * Implements hook_views_data().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_data() {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsDataEvent();
  $manager->register($event);
  return $event->getData();
}

/**
 * Implements hook_views_data_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_data_alter(array &$data) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new ViewsDataAlterEvent($data));
}

/**
 * Implements hook_views_pre_execute().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_pre_execute(ViewExecutable $view) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPreExecuteEvent($view);
  $manager->register($event);
}

/**
 * Implements hook_views_post_execute().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_post_execute(ViewExecutable $view) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPostExecuteEvent($view);
  $manager->register($event);
}

/**
 * Implements hook_views_pre_build().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_pre_build(ViewExecutable $view) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPreBuildEvent($view);
  $manager->register($event);
}

/**
 * Implements hook_views_post_build().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_post_build(ViewExecutable $view) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPostBuildEvent($view);
  $manager->register($event);
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_pre_render(ViewExecutable $view) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPreRenderEvent($view);
  $manager->register($event);
}

/**
 * Implements hook_views_post_render().
 *
 * @see https://www.drupal.org/project/drupal/issues/2793169
 *   Drupal core issue regarding $output being documented as a string when it is
 *   in fact a render array.
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsPostRenderEvent($view, $output, $cache);
  $manager->register($event);
}

/**
 * Implements hook_views_query_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsQueryAlterEvent($view, $query);
  $manager->register($event);
}

/**
 * Implements hook_views_query_substitutions().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_views_query_substitutions(ViewExecutable $view) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ViewsQuerySubstitutionsEvent($view);
  $manager->register($event);
  return $event->getSubstitutions();
}

/**
 * Implements hook_user_cancel().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_user_cancel(array $edit, AccountInterface $account, string $method) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new UserCancelEvent($edit, $account, $method);
  $manager->register($event);
}

/**
 * Implements hook_user_cancel_methods_alter.
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_user_cancel_methods_alter(array &$methods) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new UserCancelMethodsAlterEvent($methods);
  $manager->register($event);
}

/**
 * Implements hook_user_login().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_user_login(AccountInterface $account) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new UserLoginEvent($account);
  $manager->register($event);
}

/**
 * Implements hook_user_logout().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_user_logout(AccountInterface $account) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new UserLogoutEvent($account);
  $manager->register($event);
}

/**
 * Implements hook_user_format_name_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_user_format_name_alter(&$name, AccountInterface $account) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new UserFormatNameAlterEvent($name, $account);
  $manager->register($event);
}

/**
 * Implements hook_toolbar_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_toolbar_alter(array &$items) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new ToolbarAlterEvent($items);
  $manager->register($event);
}

/**
 * Implements hook_cron().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_cron() {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new CronEvent();
  $manager->register($event);
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_language_switch_links_alter(array &$links, string $type, Url $path) {
  /* @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManagerInterface $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new LanguageSwitchLinksAlterEvent($links, $type, $path);
  $manager->register($event);
}
